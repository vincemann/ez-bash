# EZ BASH START	by vincemann @ https://github.com/vincemann/ez-bash ____________________________________________________________________________________________


# Eternal bash history.
# ---------------------------------------------------------------
# this is set in local bashrc by install script:
# HISTSIZE=
# HISTFILESIZE=

# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTSIZE=
export HISTFILESIZE=
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE="$HOME/.bash_eternal_history"
# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
# ---------------------------------------------------------------
# https://unix.stackexchange.com/questions/119/colors-in-man-pages
# Get color support for 'less' thus also in manpages
export LESS="--RAW-CONTROL-CHARS"
[[ -f ~/.LESS_TERMCAP ]] && . ~/.LESS_TERMCAP

# set by install script
EZ_BASH_FUNCTIONS_DIR=

# in case you are using https://github.com/vincemann/ssh-edit project from my repo
export GUI_EDITOR="subl"

# wont work like that bc I also want to export functions
# source $EZ_BASH_FUNCTIONS_DIR/ez-bash-functions


# defined functions in its own file again, bc in some env functions cant be found in bash scripts even when exported
# so the scripts can still use these by sourcing the functions file

path()
{
	file="$1"
	abs_path=$(readlink -n -f "$file")
	ret=$?
	echo -n "$abs_path" | copy
	log "$abs_path"
	return $ret
}

where()
{
	file="$1"
	path=$(whereis "$file"| cut -d " " -f 2)
	ret=$?
	echo -n "$path" | copy
	log "$path"
	return $ret
}

popup()
{
	# maybe later add new line support:
	# https://unix.stackexchange.com/questions/231089/how-to-move-forward-in-a-line-in-bash-with-echo
	msg="$1"
	time="$2"
	if [[ -z "$time" ]];then
		time="1000"
	fi
	notify-send "$msg" -t "$time"
	return $?
}


# merge config of subl user & root
edit_func()
{
	# turn command into string
	file="$1"
	cmd_format="subl %s"
	printf -v cmd "$cmd_format" "$file"	
	if test -f "$file"; then
		# file does exist
		log "editing file"
		repeat_with_sudo_if_not_writeable "$file" "$cmd"
	else
		# file does not exist
		log "creating file"
		dir="$file"
		if [[ "$file" == *"/"* ]]; then
  			# is path
  			dir=$(dirname "$file")
  		else
  			dir=$(pwd)
		fi
		repeat_with_sudo_if_not_writeable "$dir" "$cmd"
	fi
	return $?
}

resolve_alias()
{
	echo "${BASH_ALIASES[$1]}"
}

log()
{
	msg="$1"
	echo "$msg" >> /tmp/gillog
	return $?
	# echo "$msg" >> "/tmp/gil.bash.log"
}

loge()
{
	>$2 log "$@"
}

chmodx_func()
{
	file="$1"
	cmd="chmod a+x %s"
	printf -v res_cmd "$cmd" "$file"	
	if test -f "$file"; then
		# file does exist
		repeat_with_sudo_if_not_writeable "$file" "$res_cmd"
		return $?
	else
		loge "file does not exist"
		return 1
	fi
}

# USE WITH CAUTION
repeat_with_sudo_if_not_writeable()
{
	file="$1"
	cmd="$2"
#	log "command :$cmd"
	test -w "$file"
	local status=$?
	if (( status != 0 ));then
		log "root"
		sudo_func $cmd
		return $?
	else
		log "normal user"
		$cmd
		return $?
	fi

}

# USE WITH CAUTION
repeat_with_sudo_on_fail()
{
	cmd="$1"
	# try execute command with normal rights
	$cmd
	ret=$?
	if (( status != 0 ));then
		log "repeating as root"
		# replace with sudo func? What if cmd contains bash functions?
		# should already use alias though
		sudo_func $cmd
		ret=$?
	fi
	return $ret
}

# cuts off last newline if present
copy()
{
	selection=`cat`
	echo -n "$selection" | xclip -selection clipboard 1>&2>/dev/null
	ret=$?
	popup "copied"
	return $ret
}


copyn()
{
	xclip -selection clipboard 1>&2>/dev/null
	ret=$?
	popup "copied"
	return $ret
}

# cuts off last newline
paste()
{
	to_paste=$(xclip -selection clipboard -o | tr -d '\n')
	ret=$?
	echo -n "$to_paste"
	return $ret
}


pasten()
{
	to_paste=$(xclip -selection clipboard -o)
	ret=$?
	echo "$to_paste"
	return $ret
}

# see man trash*
# rm file 		-> puts file to trash
# rm -ff file 		-> deletes file fully
rm_func()
{
	force="$1"
	if [[ "$force" == "-ff" ]];then
		log "forced remove"
		shift 1
		# echo "args: $@"
		rm -rf "$@"
		return $?
	fi
	log "move to trash"
	trash "$@"
	return $?
}

silent()
{
	$@ 1>&2>/dev/null
	return $?
}



# makes sudo work with bashfunctions and aliases
# is buggy if u supply sudo args like -i thats why this function is only used internally
sudo_func()
{
	# out=$(mktemp)
	# err=$(mktemp)
	# maybe need to replace all " with \"
	# cmd=$(echo -en "${@} 1>\"$out\" 2>\"$err\"")
	cmd=$(echo -en "${@}")
	# echo 'command: '"$cmd"''

	# bashrc init code can react to that,
	# to avoid printing stuff again for this temp subshell
	export SUDO_BASH_SUBSHELL=true
	sudo --preserve-env=SUDO_BASH_SUBSHELL bash -i -c ''"$cmd"''
	unset SUDO_BASH_SUBSHELL
	# export SUDO_BASH_SUBSHELL=false
	# bash inherits exit code from subshell
	# out=$(cat "$out")
	# err=$(cat "$err")
	# if [[ -n "$out" ]];then
	# 	echo "$out"
	# fi
	# if [[ -n "$err" ]];then
	# 	>$2 echo "$err"
	# fi
	return $?
}

find_containing_func()
{
	dir="$1"
	expression="$2"
	# searches all files starting from dir $1 that match the regex $2
	# old version had -w in it?
	sudo_func grep --exclude=*.o --exclude=/dev* --exclude=/proc* -rnHIi "$dir" -e "$expression"
}

# working pkill alternative
apkill()
{
	(ps ax | grep -i "$1") | while read line; do var=$(echo "$line" | awk '{print $1}');echo "$var";kill "$var";done
}

# not always working as expected, use backx instead if not working
back()
{
	screen -dm -s "$@"
}

backx()
{
	screen -dm "$@"
}

rm-last-history()
{
	sed -i '$ d' "$HISTFILE"
}


# export functions so they can be used in other bash scrits
export -f log
export -f loge

export -f copy
# copy without newline
export -f copyn
export -f paste
export -f pasten

export -f path
export -f where
export -f back
export -f backx
# alias backx='screen -dm'

export -f silent
export -f apkill
export -f rm-last-history


# Aliases
# export functions if u want to use the alias in shell scripts as well
alias rm=rm_func
alias grep='grep --color=auto'
alias mark='ack --passthru'
alias e=edit_func
alias x=chmodx_func
alias size='sudo_func du -sh'
alias targz='tar -xf'
alias find-containing='find_containing_func'


# EZ BASH END ____________________________________________________________________________________________
